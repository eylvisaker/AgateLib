#version 130

precision highp float;

in vec3 tangent; //The inverse tangent to the geometry
in vec3 bitangent; //The inverse binormal to the geometry

out vec4 diffuse,ambientGlobal,ambient;
out vec3 normal,lightDir,halfVector;
out float dist;

void main()
{
	vec3 aux;
	
	normal = normalize(gl_Normal);
	
	// Building the matrix Eye Space -> Tangent Space
	vec3 n = normalize (gl_NormalMatrix * gl_Normal);
	vec3 t = normalize (gl_NormalMatrix * tangent);
	vec3 b = normalize (gl_NormalMatrix * bitangent);
	
	vec4 evPos = gl_ModelViewMatrix * gl_Vertex;
	vec3 lightVec = vec3(gl_LightSource[0].position.xyz - evPos.xyz);
	
	vec3 v;
	v.x = dot(lightVec, t);
	v.y = dot(lightVec, b);
	v.z = dot(lightVec, n);
	lightDir = normalize(v);
	
	dist = length(lightVec);

	halfVector = normalize(gl_LightSource[0].halfVector.xyz);
	
	/* Compute the diffuse, ambient and globalAmbient terms */
	diffuse = gl_FrontMaterial.diffuse * gl_LightSource[0].diffuse;
	
	/* The ambient terms have been separated since one of them */
	/* suffers attenuation */
	ambient = gl_FrontMaterial.ambient * gl_LightSource[0].ambient;
	ambientGlobal = gl_LightModel.ambient * gl_FrontMaterial.ambient;
	
	gl_Position = ftransform();
	gl_TexCoord[0] = gl_MultiTexCoord0;	
} 
